local s = require("examples/scripts/lib/settings")
local utils = require("examples/scripts/lib/utils")
local camera = require "orthographic.camera"

local touch_pos = vmath.vector3()
local coord_x, coord_y, snapped_x, snapped_y = 0
local is_door_open = false
local function unleash_demon(self, x, y, coord_x, coord_y)
    factory.create("/factories#wizard", vmath.vector3(x, y, 0.3), nil, {tile_x = coord_x, tile_y = coord_y})
end

function init(self)
    msg.post("#", "acquire_input_focus")

    local levelx, levely, w, h = tilemap.get_bounds("/tilemap#dungeon")
    local tile, coord_x, coord_y = 0
    local pos = vmath.vector3()
    for ly = 0, h - 1 do
        for lx = 0, w - 1 do
            tile = tilemap.get_tile("/tilemap#dungeon", hash("ground"), lx + 1, ly + 1)

            s.world[ly * w + lx + 1] = tile -- World table for path

            if tile == 130 or tile == 163 then --Ground tile ID
                coord_x, coord_y = utils:coords_to_screen(lx, ly)
                pos = vmath.vector3(coord_x, coord_y, 0.3)
                table.insert(s.tiles, {x = lx, y = ly, position = pos}) -- Tile position table
            end

            tile = tilemap.get_tile("/tilemap#dungeon", hash("targets"), lx + 1, ly + 1)
            if tile == 386 then -- Target tile ID
                table.insert(s.targets, {x = lx, y = ly}) -- Targets table
            end
        end
    end

    s.target_count = #s.targets -- Total targets
    s.tiles_count = #s.tiles -- Total tiles

    s.mapWidth = w
    s.mapHeight = h
    s.allocate = w * h
    local costs = {
        [130] = {
            1.0,
            1.0,
            1.0,
            1.0,
            1.41,
            1.41,
            1.41,
            1.41
        }
    }

    astar.setup(s.mapWidth, s.mapHeight, s.direction, s.allocate, s.typical_adjacent, s.cache)
    astar.set_map(s.world)
    astar.set_costs(costs)
end

local function open_door()
    tilemap.set_tile("/tilemap#dungeon_walls", "walls", 11, 10, 486)
    tilemap.set_tile("/tilemap#dungeon_walls", "walls", 12, 10, 487)
    tilemap.set_tile("/tilemap#dungeon_walls", "walls", 11, 11, 454)
    tilemap.set_tile("/tilemap#dungeon_walls", "walls", 12, 11, 455)

    local costs = {
        [130] = {
            1.0,
            1.0,
            1.0,
            1.0,
            1.41,
            1.41,
            1.41,
            1.41
        },
        [163] = {
            1.0,
            1.0,
            1.0,
            1.0,
            1.41,
            1.41,
            1.41,
            1.41
        }
    }
    astar.set_costs(costs)
end

function on_input(self, action_id, action)
    if action_id == hash("SPACE") and action.pressed then
        if is_door_open then
            return
        end
        is_door_open = true
        open_door()
        print("Door")
    elseif action_id == hash("click") and action.pressed then
        touch_pos = camera.screen_to_world(s.camera, vmath.vector3(action.x, action.y, 0))
        coord_x, coord_y = utils:screen_to_coords(touch_pos.x, touch_pos.y)

        for i = 1, s.tiles_count do
            if coord_x == s.tiles[i].x and coord_y == s.tiles[i].y then
                snapped_x, snapped_y = utils:snap_screen_to_tile_center(touch_pos.x, touch_pos.y)
                unleash_demon(self, snapped_x, snapped_y, coord_x, coord_y)
            end
        end
    end
end
